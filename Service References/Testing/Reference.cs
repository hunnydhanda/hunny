//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.Testing {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Testing.Itesting")]
    public interface Itesting {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/DoWork", ReplyAction="http://tempuri.org/Itesting/DoWorkResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/DoWork", ReplyAction="http://tempuri.org/Itesting/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/Multiple", ReplyAction="http://tempuri.org/Itesting/MultipleResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Multiple(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/Multiple", ReplyAction="http://tempuri.org/Itesting/MultipleResponse")]
        System.Threading.Tasks.Task<int> MultipleAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/Addition", ReplyAction="http://tempuri.org/Itesting/AdditionResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Addition(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/Addition", ReplyAction="http://tempuri.org/Itesting/AdditionResponse")]
        System.Threading.Tasks.Task<int> AdditionAsync(int a, int b);
        
        // CODEGEN: Parameter 'databasecallResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/databasecall", ReplyAction="http://tempuri.org/Itesting/databasecallResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebApplication1.Testing.databasecallResponse databasecall(WebApplication1.Testing.databasecallRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Itesting/databasecall", ReplyAction="http://tempuri.org/Itesting/databasecallResponse")]
        System.Threading.Tasks.Task<WebApplication1.Testing.databasecallResponse> databasecallAsync(WebApplication1.Testing.databasecallRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="databasecall", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class databasecallRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string username;
        
        public databasecallRequest() {
        }
        
        public databasecallRequest(string username) {
            this.username = username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="databasecallResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class databasecallResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable databasecallResult;
        
        public databasecallResponse() {
        }
        
        public databasecallResponse(System.Data.DataTable databasecallResult) {
            this.databasecallResult = databasecallResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ItestingChannel : WebApplication1.Testing.Itesting, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ItestingClient : System.ServiceModel.ClientBase<WebApplication1.Testing.Itesting>, WebApplication1.Testing.Itesting {
        
        public ItestingClient() {
        }
        
        public ItestingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ItestingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItestingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItestingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public int Multiple(int a, int b) {
            return base.Channel.Multiple(a, b);
        }
        
        public System.Threading.Tasks.Task<int> MultipleAsync(int a, int b) {
            return base.Channel.MultipleAsync(a, b);
        }
        
        public int Addition(int a, int b) {
            return base.Channel.Addition(a, b);
        }
        
        public System.Threading.Tasks.Task<int> AdditionAsync(int a, int b) {
            return base.Channel.AdditionAsync(a, b);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebApplication1.Testing.databasecallResponse WebApplication1.Testing.Itesting.databasecall(WebApplication1.Testing.databasecallRequest request) {
            return base.Channel.databasecall(request);
        }
        
        public System.Data.DataTable databasecall(string username) {
            WebApplication1.Testing.databasecallRequest inValue = new WebApplication1.Testing.databasecallRequest();
            inValue.username = username;
            WebApplication1.Testing.databasecallResponse retVal = ((WebApplication1.Testing.Itesting)(this)).databasecall(inValue);
            return retVal.databasecallResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebApplication1.Testing.databasecallResponse> WebApplication1.Testing.Itesting.databasecallAsync(WebApplication1.Testing.databasecallRequest request) {
            return base.Channel.databasecallAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.Testing.databasecallResponse> databasecallAsync(string username) {
            WebApplication1.Testing.databasecallRequest inValue = new WebApplication1.Testing.databasecallRequest();
            inValue.username = username;
            return ((WebApplication1.Testing.Itesting)(this)).databasecallAsync(inValue);
        }
    }
}
